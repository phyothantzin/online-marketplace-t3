"use client";
import Head from "next/head";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { api } from "~/utils/api";
import { createClient } from "@supabase/supabase-js";
import { useState } from "react";
import Link from "next/link";
import { env } from "~/env.mjs";
import Loading from "~/pages/Loading";
import Image from "next/image";

type Inputs = {
  name: string;
  description: string;
  price: string;
};

export default function Home() {
  const router = useRouter();

  const listing = api.listing.get.useQuery(
    { listingId: router.query.id as string },
    {
      enabled: !!router.query.id,
    }
  );
  const listingItem = listing.data;

  const supabase: any = createClient(
    env.NEXT_PUBLIC_SUPABASE_URL,
    env.NEXT_PUBLIC_SUPABASE_KEY
  );
  const [image, setImage] = useState<any>({});
  const updateListing = api.listing.update.useMutation();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();

  const onSubmit = async (formData: Inputs) => {
    if (formData.name !== listingItem?.name) {
      await supabase.storage
        .from("marketplace")
        .move(
          listingItem?.name.replaceAll(" ", "-"),
          formData.name.replaceAll(" ", "-")
        );
    } else if (image) {
      await supabase.storage
        .from("marketplace")
        .update(listingItem?.name.replaceAll(" ", "-"), image, {
          cacheControl: "3600",
          upsert: true,
        });
      // await supabase.storage
      //   .from("marketplace")
      //   .remove([listingItem?.name.replaceAll(" ", "-")]);
      // await supabase.storage
      //   .from("marketplace")
      //   .upload(formData.name.replaceAll(" ", "-"), image);
    }
    updateListing
      .mutateAsync({
        ...formData,
        price: parseFloat(formData.price),
        listingId: router.query.id as string,
      })
      .catch((error) => console.error(error))
      .then(() => router.push("/"));
  };
  return (
    <>
      <Head>
        <title>Sell A Product</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gray-900">
        {listing.isLoading && <Loading />}
        {listing.isFetched && (
          <div className="container flex flex-col items-center justify-center gap-12 px-4">
            <h1 className="text-3xl">Sell A Product</h1>
            <form
              className=" w-80 text-black"
              onSubmit={handleSubmit(onSubmit)}
            >
              <div className="mb-6">
                <label
                  className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                  htmlFor="file_input"
                >
                  Upload file
                </label>
                <input
                  className="block w-full cursor-pointer rounded-lg border border-gray-300 bg-gray-50 text-sm text-gray-900 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 dark:placeholder-gray-400"
                  id="file_input"
                  type="file"
                  accept="image/png, image/jpeg"
                  onChange={(e) => {
                    if (!e.target.files) return;
                    else setImage(e.target?.files[0]);
                  }}
                />
              </div>
              <Link href="#">
                <Image
                  className="w-96 rounded-t-lg"
                  src={`https://vljhhdzkmaqsnyiewqlk.supabase.co/storage/v1/object/public/marketplace/${listingItem?.name.replaceAll(
                    " ",
                    "-"
                  )}?${Date.now()}`}
                  alt=""
                />
              </Link>
              <div className="mb-6">
                <label
                  htmlFor="name"
                  className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >
                  Name
                  {errors.name && (
                    <span className="mb-1 ml-2 text-red-500">
                      * This field is required
                    </span>
                  )}
                </label>
                <input
                  type="text"
                  id="name"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                  defaultValue={listingItem?.name}
                  {...register("name", { required: true })}
                />
              </div>

              <div className="mb-6">
                <label
                  htmlFor="description"
                  className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >
                  Description
                  {errors.description && (
                    <span className="mb-1 ml-2 text-red-500">
                      * This field is required
                    </span>
                  )}
                </label>
                <textarea
                  id="description"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                  defaultValue={listingItem?.description}
                  {...register("description", { required: true })}
                />
              </div>

              <div className="mb-6">
                <label
                  htmlFor="price"
                  className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >
                  Price
                  {errors.price && (
                    <span className="mb-1 ml-2 text-red-500">
                      * This field is required
                    </span>
                  )}
                </label>
                <input
                  type="number"
                  step="0.01"
                  id="price"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                  defaultValue={listingItem?.price}
                  {...register("price", { required: true })}
                />
              </div>

              <button
                type="submit"
                className="w-full rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 sm:w-auto"
              >
                Update
              </button>
            </form>
          </div>
        )}
      </main>
    </>
  );
}
